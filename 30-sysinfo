#!/bin/bash

# /etc/update-motd.d/30-sysinfo

set -euo pipefail

# Color file to have color aliases
if [ -f /etc/update-motd.d/colors ]; then
	# shellcheck disable=SC1091
	source /etc/update-motd.d/colors
else
	GREEN="\e[38;2;0;255;0m"
	OFF="\e[0m"
fi

# To test a custom color with "$1" arguments (put a color escape sequence)
COLOR="${1:-$GREEN}"

os_module() {
	# OS version
	if [ -f /etc/os-release ]; then
		# shellcheck disable=SC1091
		source /etc/os-release
		os_version=$PRETTY_NAME
	else
		os_version="Unknown OS"
	fi

	# Model
	model=$(cat /proc/cpuinfo | grep "^Model" | awk -F": " '{print $2}' || true)

	echo "${model:-} - $os_version"
	echo ""
}

ip_module() {
	# IP adress
	ipaddr=$(hostname -I | cut -d " " -f1)

	echo -e "${COLOR}IP adress        »${OFF} $ipaddr"
}

cores_module() {
	# Number of cores
	cores=$(nproc)

	# Load average
	read -r one five fifteen rest </proc/loadavg

	echo -e "${COLOR}Processors       »${OFF} $cores cores"
	echo -e "${COLOR}Processor load   »${OFF} $one (1min) - $five (5min) - $fifteen (15min)"
}

ram_module() {
	# RAM memory
	mem_available=$(($(grep MemAvailable /proc/meminfo | awk '{print $2}') / 1024))
	mem_total=$(($(grep MemTotal /proc/meminfo | awk '{print $2}') / 1024))
	mem_pourcent_free=$(((mem_available * 100) / mem_total))

	echo -e "${COLOR}Memory available »${OFF} $mem_available MB / $mem_total MB ($mem_pourcent_free% free)"
}

swap_module() {
	# SWAP memory
	swap_available=$(($(grep SwapFree /proc/meminfo | awk '{print $2}') / 1024))
	swap_total=$(($(grep SwapTotal /proc/meminfo | awk '{print $2}') / 1024))
	swap_pourcent_free=$(((swap_available * 100) / swap_total))

	echo -e "${COLOR}Swap available   »${OFF} $swap_available MB / $swap_total MB ($swap_pourcent_free% free)"
}

temperature_module() {
	# Temperature
	if [ -x "$(command -v vcgencmd)" ]; then # Under raspberrypi
		temp="$(vcgencmd measure_temp | cut -c "6-9")°C"
		echo -e "${COLOR}Temperature      »${OFF} $temp"
	else
		temp=$(paste <(cat /sys/class/thermal/thermal_zone*/type) <(cat /sys/class/thermal/thermal_zone*/temp) | column -s $'\t' -t | sed 's/\(.\)..$/.\1°C/')
		echo -e "${COLOR}Temperature      »${OFF}"
		echo -e "$temp"
	fi
}

processes_module() {
	# Number of processes
	processes=$(find /proc/[0-9]* -maxdepth 0 | wc -l)

	echo -e "${COLOR}All processes    »${OFF} $processes"
}

uptime_module() {
	# Server uptime
	uptime=$(uptime -p)

	echo -e "${COLOR}Uptime           »${OFF} $uptime"
}

disk_module() {
	# Disk usage (use 2s timeout for weak nfs mounts)
	disk_usage=$(timeout --signal=kill 2s df -h ~ | grep -E "^(/dev/|Filesystem)")

	echo -e "${COLOR}Disk usage       »${OFF}"
	echo -e "$disk_usage"
	echo ""
}

users_module() {
	# Current connected users in SSH or console
	current_users=$(w -h) # or who

	echo -e "${COLOR}Current users    »${OFF}"
	echo -e "$current_users"
	echo ""
}

updates_module() {
	# Updates available
	updates=$(apt list --upgradable 2>/dev/null | grep -c upgradable || true)
	last_update=$(stat /var/cache/apt/ | grep Modify | awk '{print $2" "$3}' | awk -F"." '{print $1}')

	echo -e "${COLOR}Last update      »${OFF} $last_update"
	echo -e "${COLOR}Upgrades         »${OFF} $updates available"
}

main() {
	os_module
	users_module
	ip_module
	uptime_module
	updates_module
	disk_module
	cores_module
	ram_module
	swap_module
	processes_module
	temperature_module
}

main
